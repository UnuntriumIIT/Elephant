version: '3.4'

services:
  elephant:
    container_name: Elephant
    image: ${DOCKER_REGISTRY-}elephant
    build:
      context: .
      dockerfile: Elephant/Dockerfile
    ports:
      - "80:80"
    links:
      - "postgres:postgres"
      - "gateway:gateway"
    networks:
      - nginx_network

  postgres:
    container_name: Postgres
    image: postgres:latest
    volumes:
      - ./pg_init:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_MULTIPLE_DATABASES=elephant,authdb
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=admin
    ports:
      - "5432:5432"
    networks:
      - nginx_network

  admin_api:
    container_name: admin_api
    restart: always
    build:
      context: .
      dockerfile: api/admin/Dockerfile
    ports:
      - "5000:5000"
    links:
      - "postgres:postgres"
    networks:
      - nginx_network
    env_file:
      - api/admin/api_variables.env

  catalog_api:
    container_name: catalog_api
    restart: always
    build:
      context: .
      dockerfile: api/catalog/Dockerfile
    ports:
      - "5001:5001"
    links:
      - "mongo:mongo"
    networks:
      - nginx_network

  cart_api:
    container_name: cart_api
    restart: always
    build:
      context: .
      dockerfile: api/cart/Dockerfile
    ports:
      - "5004:5004"
    links:
      - "admin_api:admin_api"
      - "mongo:mongo"
    networks:
      - nginx_network
    env_file:
      - api/cart/api_variables.env

  cart_consumer:
    container_name: cart_consumer
    restart: always
    build:
      context: .
      dockerfile: api/cart/consumer/Dockerfile
    links:
      - "rabbitmq:rabbitmq"
      - "mongo:mongo"
    networks:
      - nginx_network
    env_file:
      - api/cart/consumer/consumer_variables.env
    depends_on:
      - rabbitmq

  gateway:
    container_name: gateway
    restart: always
    build:
      context: .
      dockerfile: api/gateway/Dockerfile
    ports:
      - "5003:5003"
    links:
      - "admin_api:admin_api"
      - "catalog_api:catalog_api"
    networks:
      - nginx_network
    env_file:
      - api/gateway/gateway.env
  
  catalog_consumer:
    container_name: catalog_consumer
    restart: always
    build:
      context: .
      dockerfile: api/catalog/consumer/Dockerfile
    links:
      - "rabbitmq:rabbitmq"
      - "mongo:mongo"
    networks:
      - nginx_network
    env_file:
      - api/catalog/consumer/consumer_variables.env
    depends_on:
      - rabbitmq

  rabbitmq:
    image: rabbitmq:management
    container_name: 'rabbitmq'
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    networks:
      - nginx_network

  mongo:
    container_name: 'mongo'
    image: mongo:latest
    restart: always
    ports:
      - 27017:27017
    volumes:
      - mongovolume:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    networks:
      - nginx_network

  mongo-express:
    container_name: 'mongo-express'
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL : "mongodb://root:example@mongo:27017/"
    networks:
      - nginx_network

volumes:
  mongovolume:

networks:
   nginx_network:
     driver: bridge